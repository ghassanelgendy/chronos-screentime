import time
import win32gui
import win32process
import psutil
import threading
import pandas as pd
import ctypes
from datetime import datetime
#=============================================GUI================================================

# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

OUTPUT_PATH = Path.cwd()  # Gets the current working directory
ASSETS_PATH = OUTPUT_PATH / "assets" / "frame0" 

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("980x653")
window.configure(bg = "#293E73")


canvas = Canvas(
    window,
    bg = "#293E73",
    height = 653,
    width = 980,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    38.0,
    980.0,
    155.0,
    fill="#D0D0D0",
    outline="")

canvas.create_text(
    465.0,
    57.0,
    anchor="nw",
    text="G-ZONE",
    fill="#0F1A36",
    font=("Cairo Black", 40 * -1)
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    426.0,
    97.0,
    image=image_image_1
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,        activebackground="#293E73",

    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=72.0,
    y=570.0,
    width=189.0,
    height=44.0
)

button_image_hover_1 = PhotoImage(
    file=relative_to_assets("button_hover_1.png"))

def button_1_hover(e):
    button_1.config(
        image=button_image_hover_1
    )
def button_1_leave(e):
    button_1.config(
        image=button_image_1
    )

button_1.bind('<Enter>', button_1_hover)
button_1.bind('<Leave>', button_1_leave)


button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,        activebackground="#293E73",

    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=474.0,
    y=570.0,
    width=151.0,
    height=44.0
)

button_image_hover_2 = PhotoImage(
    file=relative_to_assets("button_hover_2.png"))

def button_2_hover(e):
    button_2.config(
        image=button_image_hover_2
    )
def button_2_leave(e):
    button_2.config(
        image=button_image_2
    )

button_2.bind('<Enter>', button_2_hover)
button_2.bind('<Leave>', button_2_leave)


button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,        activebackground="#293E73",

    command=lambda: print("button_3 clicked"),
    relief="flat"
)
button_3.place(
    x=292.0,
    y=570.0,
    width=151.0,
    height=44.0
)

button_image_hover_3 = PhotoImage(
    file=relative_to_assets("button_hover_3.png"))

def button_3_hover(e):
    button_3.config(
        image=button_image_hover_3
    )
def button_3_leave(e):
    button_3.config(
        image=button_image_3
    )

button_3.bind('<Enter>', button_3_hover)
button_3.bind('<Leave>', button_3_leave)



button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,activebackground="#293E73",

    command=lambda: print("button_4 clicked"),
    relief="flat"
)
button_4.place(
    x=663.0,
    y=570.0,
    width=107.0,
    height=44.0
)

button_image_hover_4 = PhotoImage(
    file=relative_to_assets("button_hover_4.png"))

def button_4_hover(e):
    button_4.config(
        image=button_image_hover_4
    )
def button_4_leave(e):
    button_4.config(
        image=button_image_4
    )

button_4.bind('<Enter>', button_4_hover)
button_4.bind('<Leave>', button_4_leave)


button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,        activebackground="#293E73",

    highlightthickness=0,
    command=lambda: print("button_5 clicked"),
    relief="flat"
)
button_5.place(
    x=888.0,
    y=570.0,
    width=44.0,
    height=44.0
)

button_image_hover_5 = PhotoImage(
    file=relative_to_assets("button_hover_5.png"))

def button_5_hover(e):
    button_5.config(
        image=button_image_hover_5
    )
def button_5_leave(e):
    button_5.config(
        image=button_image_5
    )

button_5.bind('<Enter>', button_5_hover)
button_5.bind('<Leave>', button_5_leave)


canvas.create_rectangle(
    72.0,
    232.0,
    932.0,
    321.0,
    fill="#0F1C3C",
    outline="")

canvas.create_rectangle(
    72.0,
    297.0,
    932.0,
    529.0,
    fill="#101D3D",
    outline="")

canvas.create_rectangle(
    72.0,
    297.0,
    932.0,
    529.0,
    fill="#D9D9D9",
    outline="")

appname = canvas.create_text(
    500.0,
    265.0,
    anchor="center",
    text="Current AppName",
    fill="#D9D9D9",
    font=("Cairo Black", 32 * -1)
)

canvas.create_rectangle(
    0.0,
    0.0,
    980.0,
    35.0,
    fill="#D9D9D9",
    outline="")

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,        
    activebackground="#D9D9D9",
    highlightthickness=0,
    command=lambda: window.destroy(),
    relief="flat",
)
button_6.place(
    x=940.0798950195312,
    y=2.0,
    width=30.08994483947754,
    height=30.08994483947754
)

button_image_hover_6 = PhotoImage(
    file=relative_to_assets("button_hover_6.png"))

def button_6_hover(e):
    button_6.config(
        image=button_image_hover_6
    )
def button_6_leave(e):
    button_6.config(
        image=button_image_6
    )

button_6.bind('<Enter>', button_6_hover)
button_6.bind('<Leave>', button_6_leave)


button_image_7 = PhotoImage(
    file=relative_to_assets("button_7.png"))
button_7 = Button(
    image=button_image_7,
    borderwidth=0,
    highlightthickness=0,        activebackground="#D9D9D9",

    command=lambda: print("button_7 clicked"),
    relief="flat"
)
button_7.place(
    x=904.0,
    y=2.0,
    width=30.0,
    height=30.146074295043945
)

button_image_hover_7 = PhotoImage(
    file=relative_to_assets("button_hover_7.png"))

def button_7_hover(e):
    button_7.config(
        image=button_image_hover_7
    )
def button_7_leave(e):
    button_7.config(
        image=button_image_7
    )

button_7.bind('<Enter>', button_7_hover)
button_7.bind('<Leave>', button_7_leave)
class WindowDrag:
    def __init__(self, root, drag_widget):
        self.root = root
        self.drag_widget = drag_widget
        self.drag_widget.bind("<ButtonPress-1>", self.start_drag)
        self.drag_widget.bind("<B1-Motion>", self.do_drag)
        self.start_x = 0
        self.start_y = 0

    def start_drag(self, event):
        self.start_x = event.x_root
        self.start_y = event.y_root

    def do_drag(self, event):
        deltax = event.x_root - self.start_x
        deltay = event.y_root - self.start_y
        x = self.root.winfo_x() + deltax
        y = self.root.winfo_y() + deltay
        self.root.geometry(f"+{x}+{y}")
        self.start_x = event.x_root
        self.start_y = event.y_root

        # Center window
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()
window.geometry(f"980x653+{(screen_width-980)//2}+{(screen_height-653)//2}")
window.overrideredirect(True)  # Remove titlebar
# Add this after: canvas.create_rectangle(0.0, 0.0, 980.0, 35.0, ...)
WindowDrag(window, canvas)  # Bind dragging to top bar


window.resizable(False, False)

#================================================================================================Connection============================================================================
def update_app_name():
    """Updates the GUI with the current active application name."""
    while tracker.running:
        active_app = tracker.get_active_window_exe()
        window.after(100, canvas.itemconfig, appname, {"text": active_app})
        time.sleep(1)
#================================================================================================Console================================================================================
class App:
    def __init__(self, name):
        self.name = name
        self.total_time = 0  # in seconds
        self.usage_sessions = []

    def add_session(self, start_time, end_time):
        """Add a session of usage for this app."""
        duration = end_time - start_time
        if duration < 2:  # Ignore very short sessions
            return

        if self.usage_sessions and self.usage_sessions[-1]['end'] == start_time:
            # Combine this session with the previous one
            self.usage_sessions[-1]['end'] = datetime.fromtimestamp(end_time).strftime("%Y-%m-%d %H:%M:%S")
            self.usage_sessions[-1]['duration'] += duration
        else:
            self.usage_sessions.append({
                "start": datetime.fromtimestamp(start_time).strftime("%Y-%m-%d %H:%M:%S"),
                "end": datetime.fromtimestamp(end_time).strftime("%Y-%m-%d %H:%M:%S"),
                "duration": duration
            })
        self.total_time += duration

    def get_formatted_total_time(self):
        """Get the formatted total time."""
        return self.format_duration(self.total_time)

    @staticmethod
    def format_duration(seconds):
        """Converts duration in seconds to a human-readable format."""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        seconds = int(seconds % 60)
        
        if hours > 0:
            return f"{hours} hr {minutes} min {seconds} sec"
        elif minutes > 0:
            return f"{minutes} min {seconds} sec"
        else:
            return f"{seconds} sec"

class ScreenTimeTracker:
    IDLE_THRESHOLD = 300  # 300 seconds

    def __init__(self):
        self.current_app = None
        self.start_time = time.time()
        self.apps = {}  # Dictionary to store App objects by name
        self.total_screen_time = 0
        self.app_switch_count = 0
        self.running = True
        self.lock = threading.Lock()
        self.idle_start_time = None
        self.track_thread = threading.Thread(target=self.track_screen_time, daemon=True)
        self.track_thread.start()
        self.export_thread = threading.Thread(target=self.auto_export_log, daemon=True)
        self.export_thread.start()

    def get_active_window_exe(self):
        """Fetch the executable name of the currently active window."""
        try:
            hwnd = win32gui.GetForegroundWindow()
            if hwnd == 0:
                return "Unknown"
            _, pid = win32process.GetWindowThreadProcessId(hwnd)
            process = psutil.Process(pid)
            exe_name = process.name().replace('.exe', '')

            if exe_name == "msedge":
                return self.get_edge_tab_title(hwnd)
            return exe_name
        except Exception:
            return "Unknown Tab Name"

    def get_edge_tab_title(self, hwnd):
        """Extracts the active tab title for Microsoft Edge."""
        title = win32gui.GetWindowText(hwnd)
        if " - Microsoft Edge" in title:
            title = title.replace(" - Microsoft Edge", "")
        if " and " in title:
            title = title.split(" and ")[0]
        if " - " in title:
            title = title.split(" - ")[0]
        return f"Edge: {title}"

    def get_idle_time(self):
        """Returns the idle time in seconds."""
        class LASTINPUTINFO(ctypes.Structure):
            _fields_ = [("cbSize", ctypes.c_uint), ("dwTime", ctypes.c_ulong)]

        lii = LASTINPUTINFO()
        lii.cbSize = ctypes.sizeof(LASTINPUTINFO)
        if ctypes.windll.user32.GetLastInputInfo(ctypes.byref(lii)):
            elapsed = ctypes.windll.kernel32.GetTickCount() - lii.dwTime
            return elapsed / 1000.0  
        return 0

    def merge_consecutive_entries(self, data):
        """Merge consecutive entries of the same application."""
        if not data:
            return []
        merged_data = [data[0]]
        for entry in data[1:]:
            last_entry = merged_data[-1]
            if entry[0] == last_entry[0]:  # Same application
                last_entry[2] = entry[2]  # Update end time
                last_entry[3] += entry[3]  # Sum duration
            else:
                merged_data.append(entry)
        return merged_data

    def categorize_app(self, app_name):
        """Categorize application into predefined categories."""
        categories = {
            'social media': ['Facebook', 'Instagram', 'Twitter', 'TikTok'],
            'coding': ['py', 'VSCode', 'PyCharm', 'Eclipse'],
            'creative': ['Photoshop', 'Illustrator', 'Premiere'],
            'browser': ['Chrome', 'Firefox', 'Edge'],
            'other': []
        }
        for category, apps in categories.items():
            if any(app in app_name for app in apps):
                return category
        return 'other'

    def track_screen_time(self):
        """Tracks screen time for each application in the background."""
        while self.running:
            idle_time = self.get_idle_time()
            if idle_time >= self.IDLE_THRESHOLD:
                with self.lock:  # 🔒 Ensuring thread safety
                    if self.current_app != "Idle Time":
                        end_time = time.time()
                        if self.current_app:
                            app = self.apps.get(self.current_app)
                            if app:
                                app.add_session(self.start_time, end_time)
                                self.total_screen_time += (end_time - self.start_time)
                            if self.current_app != "Idle Time":
                                self.app_switch_count += 1
                        
                        self.current_app = "Idle Time"
                        self.start_time = time.time()
                        if "Idle Time" not in self.apps:
                            self.apps["Idle Time"] = App("Idle Time")
                        
                        print("\n🟡 System is idle... Logging idle time.")
                    
                time.sleep(1)
                continue  

            active_app = self.get_active_window_exe()
            with self.lock:  # 🔒 Protect shared resources
                if active_app != self.current_app:
                    if self.current_app:
                        end_time = time.time()
                        app = self.apps.get(self.current_app)
                        if app:
                            app.add_session(self.start_time, end_time)
                            self.total_screen_time += (end_time - self.start_time)
                        self.app_switch_count += 1
                        if self.current_app == "Idle Time":
                            self.app_switch_count -= 2
                        print(f"\nCurrent App: {self.current_app} - {App.format_duration(end_time - self.start_time)}")
                        print(f"Total Screen Time: {App.format_duration(self.total_screen_time)}")
                        print(f"App Switch Count: {self.app_switch_count}")
                        print("=================")

                self.current_app = active_app
                if active_app not in self.apps:
                    self.apps[active_app] = App(active_app)
                self.start_time = time.time()

            time.sleep(1)

    def export_log(self):
        """Exports the usage log to a CSV file using pandas."""
        today = datetime.now().strftime("%Y-%m-%d")
        file_name = f"screen_time_log_{today}.csv"
        
        data = []
        with self.lock:
            for app in self.apps.values():
                for session in app.usage_sessions:
                    data.append([ 
                        app.name,
                        session["start"],
                        session["end"],
                        round(session["duration"], 2),
                        self.categorize_app(app.name)
                    ])
        
        merged_data = self.merge_consecutive_entries(data)
        df = pd.DataFrame(merged_data, columns=["Application", "Start Time", "End Time", "Duration (seconds)", "App Type"])
        df.to_csv(file_name, index=False, encoding="utf-8")
        
        print(f"📁 Log exported to {file_name}")

    def auto_export_log(self):
        """Automatically exports the log every 5 seconds."""
        while self.running:
            time.sleep(1111)
            self.export_log()

    def stop_tracking(self):
        """Stops tracking and exports the log."""
        self.running = False
        if self.current_app:
            self.apps[self.current_app].add_session(self.start_time, time.time())
        self.export_log()

tracker = ScreenTimeTracker()
gui_thread = threading.Thread(target=update_app_name, daemon=True)
gui_thread.start()
window.mainloop()
if __name__ == "__main__":
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nStopping tracker...")
        tracker.stop_tracking()
